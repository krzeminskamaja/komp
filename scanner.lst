
// ==========================================================================
//  GPLEX error listing for lex source file <scanner.lex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  DESKTOP-1T6954A
//  DateTime: 28.06.2020 20:47:23
//  UserName: Maya
// ==========================================================================



%using QUT.Gppg;
%namespace GardensPoint

Cmt "//".*[\n]
Int 0|([1-9][0-9]*)
Dou ("0"|[1-9][0-9]*)\.[0-9]+
Str \"([^\\\"\n]|\\.)*\"
Var [a-zA-Z]+[a-zA-Z0-9]*



%%

{Cmt}				{ Compiler.lineno++; }
.					{ return (int)Tokens.Error; }
// Warning: This pattern always overrides ""*"" 
// Warning: This pattern always overrides ""/"" 
// Warning: This pattern always overrides ""("" 
// Warning: This pattern always overrides ""="" 
// Warning: This pattern always overrides ""+"" 
// Warning: This pattern always overrides ""-"" 
// Warning: This pattern always overrides "" "" 
// Warning: This pattern always overrides ""\r"" 
// Warning: This pattern always overrides ""\t"" 
// Warning: This pattern always overrides "")"" 
// Warning: This pattern always overrides ""<"" 
// Warning: This pattern always overrides "">"" 
// Warning: This pattern always overrides "";"" 
// Warning: This pattern always overrides ""}"" 
// Warning: This pattern always overrides ""~"" 
// Warning: This pattern always overrides ""{"" 
// Warning: This pattern always overrides ""!"" 
// Warning: This pattern always overrides ""&"" 
// Warning: This pattern always overrides ""|"" 
// ----------------------------------------------
{Int}				{ yylval.val=yytext; return (int)Tokens.Int; }
{Dou}				{ yylval.val=yytext; return (int)Tokens.Dou; }
{Str}				{ yylval.val=yytext; return (int)Tokens.Str; }
"while"				{ return (int)Tokens.While; }
"int"				{ return (int)Tokens.IntT; }
"double"			{ return (int)Tokens.DouT; }
"bool"				{ return (int)Tokens.BooT; }
"read"				{ return (int)Tokens.Read; }
"&"					{ return (int)Tokens.BitAnd; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"|"					{ return (int)Tokens.BitSum; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"~"					{ return (int)Tokens.BitNeg; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"!"					{ return (int)Tokens.Not; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"program"			{ return (int)Tokens.Program; }
"write"				{ return (int)Tokens.Print; }
"true"				{ return (int)Tokens.True; }
"false"				{ return (int)Tokens.False; }
"if"				{ return (int)Tokens.If; }
"else"				{ return (int)Tokens.Else;}
"return"			{ return (int)Tokens.Return;}
"{"					{ return (int)Tokens.OpenBr; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"}"					{ return (int)Tokens.CloseBr; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
";"					{ return (int)Tokens.Sc; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"="					{ return (int)Tokens.Eq; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"+"					{ return (int)Tokens.Plus; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"-"					{ return (int)Tokens.Minus; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"*"					{ return (int)Tokens.Mult; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"/"					{ return (int)Tokens.Div; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"("					{ return (int)Tokens.OpenPar; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
")"					{ return (int)Tokens.ClosePar; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"||"				{ return (int)Tokens.LogSum; }
"&&"				{ return (int)Tokens.LogInt; }
"<"					{ return (int)Tokens.LE; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
">"					{ return (int)Tokens.GE; }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"<="				{ return (int)Tokens.LT; }
">="				{ return (int)Tokens.GT; }
"=="				{ return (int)Tokens.EQ; }
"!="				{ return (int)Tokens.NE; }
<<EOF>>				{ return (int)Tokens.EOF; }
" "					{ }
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"\n"				{ Compiler.lineno++; }
"\r"				{ }
//^^
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
"\t"				{ }
//^^
// Warning: This pattern always overridden by "." 
// -----------------------------------------------
{Var}				{ yylval.val=yytext; return (int)Tokens.Var; }// ==========================================================================

