ifs		  : If OpenPar log ClosePar { 
									Random r = new Random();
									int n = 0;
									while(Compiler.labelSet.Contains(n) || n<1)
										n=r.Next();
									Compiler.labelSet.Add(n);
									 Compiler.labelFalse= "IL_"+n.ToString();
									 Console.WriteLine(Compiler.labelFalse);
									Compiler.EmitCode("brfalse {0}",Compiler.labelFalse);
									} 
									single
									{ Compiler.EmitCode("{0}: nop ",Compiler.labelFalse); } content 
		  
		  | If OpenPar rel ClosePar { 
									Random r = new Random();
									int n = 0;
									while(Compiler.labelSet.Contains(n) || n<1)
										n=r.Next();
									Compiler.labelSet.Add(n);
									 Compiler.labelFalse= "IL_"+n.ToString();
									 Console.WriteLine(Compiler.labelFalse);
									Compiler.EmitCode("brfalse {0}",Compiler.labelFalse);
									} 
									single
									{ Compiler.EmitCode("{0}: nop ",Compiler.labelFalse); } content 
		  ;
single    : print Sc
		  | asn
		  | exp Sc { Compiler.EmitCode("pop"); } 
		  | log Sc { Compiler.EmitCode("pop"); } 
		  | rel Sc { Compiler.EmitCode("pop"); } 
		  | blok
		  | ifs
		  ;

print	  : Print Str  { 
Compiler.EmitCode("ldstr {0}",$2); Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)"); Compiler.EmitCode("");
						}
		  | Print log  {
			Compiler.EmitCode("call void [mscorlib]System.Console::Write(bool)"); 
															Compiler.EmitCode("");
		  }
		  | Print rel  {
			Compiler.EmitCode("call void [mscorlib]System.Console::Write(bool)"); 
															Compiler.EmitCode("");
		  }
		   
		  | Print exp { if($2=='i') { Compiler.EmitCode("call void [mscorlib]System.Console::Write(int32)"); 
													Compiler.EmitCode("");  }
									else if($2=='d'){ 
										if(!variables.Contains("temp"))
										{	
											Compiler.EmitCode(".locals init(float64 temp)");Compiler.EmitCode("ldc.r8 {0}",0);
													Compiler.EmitCode("stloc temp");Compiler.EmitCode(""); variables.Add("temp");
										}
										Compiler.EmitCode("stloc temp");
										Compiler.EmitCode("call class [mscorlib]System.Globalization.CultureInfo [mscorlib]System.Globalization.CultureInfo::get_InvariantCulture()");
												Compiler.EmitCode("ldstr \"{0:0.000000}\"");
												Compiler.EmitCode("ldloc temp");
												Compiler.EmitCode("box [mscorlib]System.Double");
												Compiler.EmitCode("call string [mscorlib]System.String::Format(class [mscorlib]System.IFormatProvider,string, object)");
												Compiler.EmitCode("call void [mscorlib]System.Console::Write(string)");
															Compiler.EmitCode("");
															
									}
									else
									{
										Compiler.EmitCode("call void [mscorlib]System.Console::Write(bool)"); 
															Compiler.EmitCode("");
									}
							}
		  | Print error { yyerrok();  Compiler.errors++;}
		  ;
asn	  : Var Eq exp Sc { string namei="i_"+$1, named="d_"+$1;
							if(variables.Contains(namei) && $3!='i')
							{
								 Console.WriteLine("  line {0,3}:  semantic error - cannot convert double to int",lineno);
								 ++Compiler.errors;
							}
							else if(variables.Contains(named))
							{
								if($3!='d')Compiler.EmitCode("conv.r8");
								Compiler.EmitCode("stloc {0}",named);
							}
							else if(variables.Contains(namei))
							{
								if($3=='d')Compiler.EmitCode("conv.r8");
								Compiler.EmitCode("stloc {0}",namei);
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0}",$1); Compiler.errors++;
							}
						}
		  | Var Eq bool Sc { string nameb="b_"+$1;
							if(variables.Contains(nameb))
							{
								Compiler.EmitCode("stloc {0}",nameb);
								Compiler.EmitCode("");
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0}",$1); Compiler.errors++;
							}

						}
		| Var Eq log Sc { string nameb="b_"+$1;
							if(variables.Contains(nameb))
							{
								Compiler.EmitCode("stloc {0}",nameb);
								Compiler.EmitCode("");
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0}",$1); Compiler.errors++;
							}

						}
		  | Var Eq rel Sc { string nameb="b_"+$1;
							if(variables.Contains(nameb))
							{
								Compiler.EmitCode("stloc {0}",nameb);
								Compiler.EmitCode("");
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0}",$1); Compiler.errors++;
							}

						}
		  | Var Eq Minus exp Sc { string namei="i_"+$1, named="d_"+$1;
							if(variables.Contains(namei) && $4!='i')
							{
								 Console.WriteLine("  line {0,3}:  semantic error - cannot convert double to int",lineno);
								 ++Compiler.errors;
							}
							else if(variables.Contains(named))
							{
								if($4!='d')Compiler.EmitCode("conv.r8");
								Compiler.EmitCode("neg");
								Compiler.EmitCode("stloc {0}",named);
							}
							else if(variables.Contains(namei))
							{
								if($4=='d')Compiler.EmitCode("conv.r8");
								Compiler.EmitCode("neg");
								Compiler.EmitCode("stloc {0}",namei);
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0}",$1); Compiler.errors++;
							}
		  
		  }
		  ;
rel		  : exp LE exp { Compiler.EmitCode("clt"); Compiler.EmitCode(""); }
		  | exp LT exp { Compiler.EmitCode("cgt"); Compiler.EmitCode("ldc.i4 0");Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | exp GE exp { Compiler.EmitCode("cgt"); Compiler.EmitCode(""); }
		  | exp GT exp { Compiler.EmitCode("clt"); Compiler.EmitCode("ldc.i4 0");Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | exp EQ exp { Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | exp NE exp { Compiler.EmitCode("ceq"); Compiler.EmitCode("ldc.i4 0");Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | bool EQ bool { Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | bool NE bool { Compiler.EmitCode("ceq"); Compiler.EmitCode("ldc.i4 0");Compiler.EmitCode("ceq"); Compiler.EmitCode(""); }
		  | OpenPar log ClosePar
		  | OpenPar rel ClosePar
		  ;
log		  : bool {	Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelTrue = "IL_"+n.ToString();
					Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 
					} 
					LogSum bool
					{ 
					Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelFalse = "IL_"+n.ToString();

					 Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 
					 Compiler.EmitCode("ldc.i4 0"); 
					  Compiler.EmitCode("br {0}",Compiler.labelFalse);
					  Compiler.EmitCode("{0}: ldc.i4 1",Compiler.labelTrue);
					 
					 if(!variables.Contains("tempInt"))
					 {
						 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
											Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
					 }
					 Compiler.EmitCode("stloc tempInt");
					 Compiler.EmitCode("{0}: nop", Compiler.labelFalse);
					Compiler.EmitCode("ldloc tempInt");
					
					
					}
		  | bool {	Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelFalse= "IL_"+n.ToString();
					 Console.WriteLine(Compiler.labelFalse);
					Compiler.EmitCode("brfalse {0}",Compiler.labelFalse);
					} 
					LogInt bool 
					{ 
					Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelTrue= "IL_"+n.ToString();

					Compiler.EmitCode("brfalse {0}", Compiler.labelFalse); 
					Compiler.EmitCode("ldc.i4 1"); 
					Compiler.EmitCode("br {0}",Compiler.labelTrue);
					Compiler.EmitCode("{0}: ldc.i4 0",Compiler.labelFalse);
					if(!variables.Contains("tempInt"))
					 {
						 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
											Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
					 }
					Compiler.EmitCode("stloc tempInt");
					Compiler.EmitCode("{0}: nop",Compiler.labelTrue);
					Compiler.EmitCode("ldloc tempInt");
					}
		  | rel {	Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelTrue = "IL_"+n.ToString();
					Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 
					}  LogSum rel 
					{ 
					Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelFalse = "IL_"+n.ToString();

					 Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 
					 Compiler.EmitCode("ldc.i4 0"); 
					  Compiler.EmitCode("br {0}",Compiler.labelFalse);
					  Compiler.EmitCode("{0}: ldc.i4 1",Compiler.labelTrue);
					 if(!variables.Contains("tempInt"))
					 {
						 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
											Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
					 }
					 Compiler.EmitCode("stloc tempInt");
					 Compiler.EmitCode("{0}: nop", Compiler.labelFalse);
					 Compiler.EmitCode("ldloc tempInt");
					
					
					}
		  | rel {	Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelFalse= "IL_"+n.ToString();
					 Console.WriteLine(Compiler.labelFalse);
					Compiler.EmitCode("brfalse {0}",Compiler.labelFalse);
					} 
					LogInt rel 
					{ 
					Random r = new Random();
					int n = 0;
					while(Compiler.labelSet.Contains(n) || n<1)
						n=r.Next();
					Compiler.labelSet.Add(n);
					 Compiler.labelTrue= "IL_"+n.ToString();

					Compiler.EmitCode("brfalse {0}", Compiler.labelFalse); 
					Compiler.EmitCode("ldc.i4 1"); 
					Compiler.EmitCode("br {0}",Compiler.labelTrue);
					Compiler.EmitCode("{0}: ldc.i4 0",Compiler.labelFalse);
					if(!variables.Contains("tempInt"))
					 {
						 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
											Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
					 }
					Compiler.EmitCode("stloc tempInt");
					Compiler.EmitCode("{0}: nop",Compiler.labelTrue);
					Compiler.EmitCode("ldloc tempInt");
					}
		  | Var LogSum Var { string name1 = "b_"+$1,name2="b_"+$3;
							if(variables.Contains(name1) && variables.Contains(name2))
							{
								Compiler.EmitCode("ldloc {0}",name1);

								Random r = new Random();
								int n = 0;
								while(Compiler.labelSet.Contains(n) || n<1)
									n=r.Next();
								Compiler.labelSet.Add(n);
								 Compiler.labelTrue = "IL_"+n.ToString();
								Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 

								Compiler.EmitCode("ldloc {0}",name2);
								
								while(Compiler.labelSet.Contains(n) || n<1)
									n=r.Next();
								Compiler.labelSet.Add(n);
								 Compiler.labelFalse = "IL_"+n.ToString();

								 Compiler.EmitCode("brtrue {0}",Compiler.labelTrue); 
								 Compiler.EmitCode("ldc.i4 0"); 
								  Compiler.EmitCode("br {0}",Compiler.labelFalse);
								  Compiler.EmitCode("{0}: ldc.i4 1",Compiler.labelTrue);
								if(!variables.Contains("tempInt"))
								 {
									 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
														Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
								 }
								 Compiler.EmitCode("stloc tempInt");
								 Compiler.EmitCode("{0}: nop", Compiler.labelFalse);
								 Compiler.EmitCode("ldloc tempInt");
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0} or {1}",$1,$3); Compiler.errors++;
							} }
		  | Var LogInt Var { string name1 = "b_"+$1,name2="b_"+$3;
							if(variables.Contains(name1) && variables.Contains(name2))
							{
								Compiler.EmitCode("ldloc {0}",name1);
								Random r = new Random();
								int n = 0;
								while(Compiler.labelSet.Contains(n) || n<1)
									n=r.Next();
								Compiler.labelSet.Add(n);
								 Compiler.labelFalse= "IL_"+n.ToString();
								 Console.WriteLine(Compiler.labelFalse);
								Compiler.EmitCode("brfalse {0}",Compiler.labelFalse);
								Compiler.EmitCode("ldloc {0}",name2);
								while(Compiler.labelSet.Contains(n) || n<1)
									n=r.Next();
								Compiler.labelSet.Add(n);
								 Compiler.labelTrue= "IL_"+n.ToString();

								Compiler.EmitCode("brfalse {0}", Compiler.labelFalse); 
								Compiler.EmitCode("ldc.i4 1"); 
								Compiler.EmitCode("br {0}",Compiler.labelTrue);
								Compiler.EmitCode("{0}: ldc.i4 0",Compiler.labelFalse);
								if(!variables.Contains("tempInt"))
								 {
									 Compiler.EmitCode(".locals init(int32 tempInt)");Compiler.EmitCode("ldc.i4 {0}",0);
														Compiler.EmitCode("stloc tempInt");Compiler.EmitCode(""); variables.Add("tempInt");
								 }
								Compiler.EmitCode("stloc tempInt");
								Compiler.EmitCode("{0}: nop",Compiler.labelTrue);
								Compiler.EmitCode("ldloc tempInt");
							}
							else
							{
								yyerrok(); Console.WriteLine("undeclared variable {0} or {1}",$1,$3); Compiler.errors++;
							} }
		  ;

bool	  : True { $$ = '1'; Compiler.EmitCode("ldc.i4 1"); Compiler.EmitCode(""); }
		  | False { $$ = '0'; Compiler.EmitCode("ldc.i4 0"); Compiler.EmitCode(""); }
		  ;
exp       : exp Plus term
               { $$ = BinaryOpGenCode(Tokens.Plus, $1, $3); }
          | exp Minus term
               { $$ = BinaryOpGenCode(Tokens.Minus, $1, $3); }
          | term
               { $$ = $1; }
          ;

term      : term Mult factor
               { $$ = BinaryOpGenCode(Tokens.Mult, $1, $3); }
          | term Div factor
               { $$ = BinaryOpGenCode(Tokens.Div, $1, $3); }
          | factor
               { $$ = $1; }
          ;

factor    : Int
               {
               Compiler.EmitCode("ldc.i4 {0}",int.Parse($1));
               $$ = 'i'; 
               }
          | Dou
               {
               double d = double.Parse($1,System.Globalization.CultureInfo.InvariantCulture) ;
               Compiler.EmitCode(string.Format(System.Globalization.CultureInfo.InvariantCulture,"ldc.r8 {0}",d));
               $$ = 'd'; 
               }
          | Var
               {   
			   string namei="i_"+$1, named="d_"+$1,nameb="b_"+$1; 
				  if(variables.Contains(namei))
				  {
					Compiler.EmitCode("ldloc {0}",namei);
					 $$ = 'i';
				  }
				  else if(variables.Contains(named))
				  {
					 Compiler.EmitCode("ldloc {0}",named);
					$$ = 'd'; 
				  }
				  else if(variables.Contains(nameb))
				  {
					 Compiler.EmitCode("ldloc {0}",nameb);
					 $$ = 'b'; 
				  }
				  else
				  {
					 yyerrok(); Console.WriteLine("wrong instruction"); Compiler.errors++; YYACCEPT;
				  }
		  
               }
			| OpenPar exp ClosePar
               { $$ = $2; }
          ;